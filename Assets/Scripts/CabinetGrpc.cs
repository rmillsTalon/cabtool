// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cabinet.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcCabinet {
  /// <summary>
  /// The  service definition.
  /// </summary>
  public static partial class Cabinet
  {
    static readonly string __ServiceName = "cabinet.Cabinet";

    static readonly grpc::Marshaller<global::GrpcCabinet.CabinetRequest> __Marshaller_cabinet_CabinetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcCabinet.CabinetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcCabinet.ContainerReply> __Marshaller_cabinet_ContainerReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcCabinet.ContainerReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcCabinet.IoReply> __Marshaller_cabinet_IoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcCabinet.IoReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcCabinet.DeviceReply> __Marshaller_cabinet_DeviceReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcCabinet.DeviceReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcCabinet.HealthMsg> __Marshaller_cabinet_HealthMsg = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcCabinet.HealthMsg.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcCabinet.IoDirectRequest> __Marshaller_cabinet_IoDirectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcCabinet.IoDirectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcCabinet.ReturnMsg> __Marshaller_cabinet_ReturnMsg = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcCabinet.ReturnMsg.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcCabinet.Subscription> __Marshaller_cabinet_Subscription = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcCabinet.Subscription.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcCabinet.IoMsg> __Marshaller_cabinet_IoMsg = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcCabinet.IoMsg.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcCabinet.Unsubscription> __Marshaller_cabinet_Unsubscription = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcCabinet.Unsubscription.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcCabinet.CabinetRequest, global::GrpcCabinet.ContainerReply> __Method_GetContainers = new grpc::Method<global::GrpcCabinet.CabinetRequest, global::GrpcCabinet.ContainerReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContainers",
        __Marshaller_cabinet_CabinetRequest,
        __Marshaller_cabinet_ContainerReply);

    static readonly grpc::Method<global::GrpcCabinet.CabinetRequest, global::GrpcCabinet.IoReply> __Method_GetIos = new grpc::Method<global::GrpcCabinet.CabinetRequest, global::GrpcCabinet.IoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIos",
        __Marshaller_cabinet_CabinetRequest,
        __Marshaller_cabinet_IoReply);

    static readonly grpc::Method<global::GrpcCabinet.CabinetRequest, global::GrpcCabinet.DeviceReply> __Method_GetDevices = new grpc::Method<global::GrpcCabinet.CabinetRequest, global::GrpcCabinet.DeviceReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDevices",
        __Marshaller_cabinet_CabinetRequest,
        __Marshaller_cabinet_DeviceReply);

    static readonly grpc::Method<global::GrpcCabinet.CabinetRequest, global::GrpcCabinet.HealthMsg> __Method_GetHealth = new grpc::Method<global::GrpcCabinet.CabinetRequest, global::GrpcCabinet.HealthMsg>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHealth",
        __Marshaller_cabinet_CabinetRequest,
        __Marshaller_cabinet_HealthMsg);

    static readonly grpc::Method<global::GrpcCabinet.IoDirectRequest, global::GrpcCabinet.ReturnMsg> __Method_UpdateIoDirect = new grpc::Method<global::GrpcCabinet.IoDirectRequest, global::GrpcCabinet.ReturnMsg>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateIoDirect",
        __Marshaller_cabinet_IoDirectRequest,
        __Marshaller_cabinet_ReturnMsg);

    static readonly grpc::Method<global::GrpcCabinet.Subscription, global::GrpcCabinet.IoMsg> __Method_Subscribe = new grpc::Method<global::GrpcCabinet.Subscription, global::GrpcCabinet.IoMsg>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Subscribe",
        __Marshaller_cabinet_Subscription,
        __Marshaller_cabinet_IoMsg);

    static readonly grpc::Method<global::GrpcCabinet.Subscription, global::GrpcCabinet.Unsubscription> __Method_Unsubscribe = new grpc::Method<global::GrpcCabinet.Subscription, global::GrpcCabinet.Unsubscription>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Unsubscribe",
        __Marshaller_cabinet_Subscription,
        __Marshaller_cabinet_Unsubscription);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcCabinet.CabinetReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Cabinet</summary>
    [grpc::BindServiceMethod(typeof(Cabinet), "BindService")]
    public abstract partial class CabinetBase
    {
      public virtual global::System.Threading.Tasks.Task<global::GrpcCabinet.ContainerReply> GetContainers(global::GrpcCabinet.CabinetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcCabinet.IoReply> GetIos(global::GrpcCabinet.CabinetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcCabinet.DeviceReply> GetDevices(global::GrpcCabinet.CabinetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcCabinet.HealthMsg> GetHealth(global::GrpcCabinet.CabinetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcCabinet.ReturnMsg> UpdateIoDirect(global::GrpcCabinet.IoDirectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Subscribe(global::GrpcCabinet.Subscription request, grpc::IServerStreamWriter<global::GrpcCabinet.IoMsg> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcCabinet.Unsubscription> Unsubscribe(global::GrpcCabinet.Subscription request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Cabinet</summary>
    public partial class CabinetClient : grpc::ClientBase<CabinetClient>
    {
      /// <summary>Creates a new client for Cabinet</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CabinetClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Cabinet that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CabinetClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CabinetClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CabinetClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::GrpcCabinet.ContainerReply GetContainers(global::GrpcCabinet.CabinetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContainers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcCabinet.ContainerReply GetContainers(global::GrpcCabinet.CabinetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContainers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcCabinet.ContainerReply> GetContainersAsync(global::GrpcCabinet.CabinetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContainersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcCabinet.ContainerReply> GetContainersAsync(global::GrpcCabinet.CabinetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContainers, null, options, request);
      }
      public virtual global::GrpcCabinet.IoReply GetIos(global::GrpcCabinet.CabinetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcCabinet.IoReply GetIos(global::GrpcCabinet.CabinetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIos, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcCabinet.IoReply> GetIosAsync(global::GrpcCabinet.CabinetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcCabinet.IoReply> GetIosAsync(global::GrpcCabinet.CabinetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIos, null, options, request);
      }
      public virtual global::GrpcCabinet.DeviceReply GetDevices(global::GrpcCabinet.CabinetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDevices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcCabinet.DeviceReply GetDevices(global::GrpcCabinet.CabinetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDevices, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcCabinet.DeviceReply> GetDevicesAsync(global::GrpcCabinet.CabinetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDevicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcCabinet.DeviceReply> GetDevicesAsync(global::GrpcCabinet.CabinetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDevices, null, options, request);
      }
      public virtual global::GrpcCabinet.HealthMsg GetHealth(global::GrpcCabinet.CabinetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHealth(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcCabinet.HealthMsg GetHealth(global::GrpcCabinet.CabinetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHealth, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcCabinet.HealthMsg> GetHealthAsync(global::GrpcCabinet.CabinetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHealthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcCabinet.HealthMsg> GetHealthAsync(global::GrpcCabinet.CabinetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHealth, null, options, request);
      }
      public virtual global::GrpcCabinet.ReturnMsg UpdateIoDirect(global::GrpcCabinet.IoDirectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateIoDirect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcCabinet.ReturnMsg UpdateIoDirect(global::GrpcCabinet.IoDirectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateIoDirect, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcCabinet.ReturnMsg> UpdateIoDirectAsync(global::GrpcCabinet.IoDirectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateIoDirectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcCabinet.ReturnMsg> UpdateIoDirectAsync(global::GrpcCabinet.IoDirectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateIoDirect, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcCabinet.IoMsg> Subscribe(global::GrpcCabinet.Subscription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcCabinet.IoMsg> Subscribe(global::GrpcCabinet.Subscription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Subscribe, null, options, request);
      }
      public virtual global::GrpcCabinet.Unsubscription Unsubscribe(global::GrpcCabinet.Subscription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Unsubscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcCabinet.Unsubscription Unsubscribe(global::GrpcCabinet.Subscription request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unsubscribe, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcCabinet.Unsubscription> UnsubscribeAsync(global::GrpcCabinet.Subscription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnsubscribeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcCabinet.Unsubscription> UnsubscribeAsync(global::GrpcCabinet.Subscription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unsubscribe, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CabinetClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CabinetClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CabinetBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetContainers, serviceImpl.GetContainers)
          .AddMethod(__Method_GetIos, serviceImpl.GetIos)
          .AddMethod(__Method_GetDevices, serviceImpl.GetDevices)
          .AddMethod(__Method_GetHealth, serviceImpl.GetHealth)
          .AddMethod(__Method_UpdateIoDirect, serviceImpl.UpdateIoDirect)
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe)
          .AddMethod(__Method_Unsubscribe, serviceImpl.Unsubscribe).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CabinetBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetContainers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcCabinet.CabinetRequest, global::GrpcCabinet.ContainerReply>(serviceImpl.GetContainers));
      serviceBinder.AddMethod(__Method_GetIos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcCabinet.CabinetRequest, global::GrpcCabinet.IoReply>(serviceImpl.GetIos));
      serviceBinder.AddMethod(__Method_GetDevices, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcCabinet.CabinetRequest, global::GrpcCabinet.DeviceReply>(serviceImpl.GetDevices));
      serviceBinder.AddMethod(__Method_GetHealth, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcCabinet.CabinetRequest, global::GrpcCabinet.HealthMsg>(serviceImpl.GetHealth));
      serviceBinder.AddMethod(__Method_UpdateIoDirect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcCabinet.IoDirectRequest, global::GrpcCabinet.ReturnMsg>(serviceImpl.UpdateIoDirect));
      serviceBinder.AddMethod(__Method_Subscribe, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::GrpcCabinet.Subscription, global::GrpcCabinet.IoMsg>(serviceImpl.Subscribe));
      serviceBinder.AddMethod(__Method_Unsubscribe, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcCabinet.Subscription, global::GrpcCabinet.Unsubscription>(serviceImpl.Unsubscribe));
    }

  }
}
#endregion
